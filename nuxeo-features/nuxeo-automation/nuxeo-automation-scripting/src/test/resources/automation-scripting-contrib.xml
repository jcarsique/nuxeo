<?xml version="1.0"?>
<component name="org.nuxeo.automation.scripting.testContrib" version="1.0">

  <extension target="org.nuxeo.ecm.core.operation.OperationServiceComponent"
             point="operations">
  <operation
          class="org.nuxeo.automation.scripting.test.operations.ContextModificationTest" />
    <operation class="org.nuxeo.automation.scripting.test.operations.Operation1"/>
  </extension>

  <extension target="org.nuxeo.automation.scripting.internals.AutomationScriptingComponent" point="operation">

    <scriptedOperation id="Scripting.HelloWorld">
       <inputType>string</inputType>
       <outputType>string</outputType>
       <category>Scripting</category>
       <param name="lang" type="string"/>

       <script>
         function run(input, params) {
           if (params.lang === "fr") {
             return "Bonjour " + input;
           } else if (params.lang == "en") {
             return "Hello " + input;
           }
         }
       </script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.AddFacetInSubTree">
       <inputType>Document</inputType>
       <outputType>Documents</outputType>
       <category>Scripting</category>
       <param name="facet" type="string"/>
       <param name="type" type="string"/>

       <script><![CDATA[
         function run(input, params) {

            var query = "select * from " + params.type + " where ecm:path startswith '";
            query = query + input.getPath();
            query = query + "'";

            //println("query = " + query);
            var subDocs = Document.Query(null, {
                "query": query
            });
            //println("Query run with " + subDocs.size() + " result");
            var updated = [];
            for (var i = 0; i < subDocs.size(); i++) {
                var doc = subDocs.get(i);
                if (!doc.hasFacet(params.facet)) {
                    doc.addFacet(params.facet);
                    updated.push(Document.Save(doc, {}));
                }
            }
            return updated;
        }
         ]]>
       </script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestOperationCtx">
       <inputType>Document</inputType>
       <outputType>Document</outputType>
       <category>Scripting</category>
       <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            // Test the first Context entry injection
            newDoc = Document.Update(newDoc, {
                "properties" : {
                    "dc:nature" : ctx.test
                }
            });

            // Context modification
            Testing.ContextModificationTest(null, {});

            // Update doc values with new Context values
            newDoc = Document.Update(newDoc, {
                "properties" : {
                    "dc:description" : ctx.test,
                    "dc:title" : ctx.new,
                    "dc:creator" : currentUser.name
                }
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestBlob">
      <inputType>Blob</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            print("doc title:" + newDoc.getProperty("dc:title"));
            print("doc title:" + newDoc["dc:title"]);

            var blob = Blob.AttachOnDocument(input, {
                "document" : params.document
            });

            Log(null, {
                "message" : "LogOperation is working so much - Blob title:"+blob.filename,
                "level" : "info"
            });

            print("title:"+blob.filename);

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestComplexProperties">
      <inputType>Blob</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="document" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });
            var newDoc = Document.Create(root, {
                "type" : params.type,
                "name" : params.name,
                "properties" : params.properties
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestSetBlob">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <param name="file" type="string"/>

      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : "New Title",
                    "dc:source" : "JavaScript",
                    "dc:subjects" : [ "from", "javascript" ]
                }
            });

            Document.SetBlob(newDoc, {
              'file': input,
              'save': true
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestInputDocumentList">
      <inputType>void</inputType>
      <outputType>Documents</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var children = Document.GetChildren(root, {});

            Context.PushDocumentList(children, {});

            return children;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestOperationWF">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var root = Repository.GetDocument(null, {
                "value" : "/"
            });

            var newDoc = Document.Create(root, {
                "type" : "File",
                "name" : "newDoc",
                "properties" : {
                    "dc:title" : ctx.WorkflowVariables.var,
                    "dc:description" : ctx.NodeVariables.var
                }
            });

            return newDoc;
        }
      ]]></script>
    </scriptedOperation>

    <scriptedOperation id="Scripting.TestChainWithDashes">
      <inputType>Document</inputType>
      <outputType>Document</outputType>
      <category>Scripting</category>
      <script><![CDATA[
        function run(input, params) {

            var document = my_chain_with_dashes(input, {});

            return document;
        }
      ]]></script>
    </scriptedOperation>

  </extension>

  <extension point="chains"
    target="org.nuxeo.ecm.core.operation.OperationServiceComponent">

    <chain id="Scripting.ChainedHello">
      <operation id="Scripting.HelloWorld">
        <param type="string" name="lang">fr</param>
      </operation>
      <operation id="Scripting.HelloWorld">
        <param type="string" name="lang">en</param>
      </operation>
    </chain>

    <chain id="my-chain-with-dashes">
      <operation id="o1">
        <param type="string" name="message">Hello 1!</param>
      </operation>
    </chain>

  </extension>

</component>
